options:
  parameters:
    author: SEAKn Space
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: packet transmit
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: qpsk_tx_automated
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: qpsk_tx_automated
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: access_key
  id: variable
  parameters:
    comment: ''
    value: '''11100001010110101110100010010011'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 12.0]
    rotation: 0
    state: enabled
- name: baseband_LO
  id: variable
  parameters:
    comment: ''
    value: 0e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 92.0]
    rotation: 0
    state: enabled
- name: excess_bw
  id: variable
  parameters:
    comment: ''
    value: '0.35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 84.0]
    rotation: 0
    state: enabled
- name: hdr_format
  id: variable
  parameters:
    comment: header_format_default
    value: digital.header_format_default(access_key, 0)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 12.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_taps
  id: variable_low_pass_filter_taps
  parameters:
    beta: '0.35'
    comment: ''
    cutoff_freq: '20000'
    gain: '1.0'
    samp_rate: samp_rate
    value: ''
    width: '2000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 8.0]
    rotation: 0
    state: true
- name: packet_len
  id: variable
  parameters:
    comment: ''
    value: '64'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 12.0]
    rotation: 0
    state: true
- name: qpsk
  id: variable_constellation
  parameters:
    comment: ''
    const_points: '[-1-1j, -1+1j, 1+1j, 1-1j]'
    dims: '1'
    normalization: digital.constellation.AMPLITUDE_NORMALIZATION
    npwr: '1.0'
    precision: '8'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 3, 2]'
    type: qpsk
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 12.0]
    rotation: 0
    state: true
- name: rs_ratio
  id: variable
  parameters:
    comment: ''
    value: '1.0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 84.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 100e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: ''
    value: '15'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 12.0]
    rotation: 0
    state: enabled
- name: transmit_freq
  id: variable
  parameters:
    comment: ''
    value: 435e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1296, 12.0]
    rotation: 0
    state: true
- name: InFile
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: File Name
    short_id: ''
    type: str
    value: default
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 12.0]
    rotation: 0
    state: true
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '0.3'
    comment: ''
    freq: baseband_LO
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    showports: 'False'
    type: complex
    waveform: analog.GR_SIN_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 656.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: '"./ModulatedData.txt"'
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 628.0]
    rotation: 0
    state: enabled
- name: blocks_file_sink_0_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: C:\Users\natha\Documents\testData
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 780.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 664.0]
    rotation: 0
    state: enabled
- name: blocks_repack_bits_bb_0_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: MSB
    endianness: gr.GR_MSB_FIRST
    k: '8'
    l: '1'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 660.0]
    rotation: 0
    state: disabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: packet_len
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 256.0]
    rotation: 0
    state: true
- name: blocks_uchar_to_float_0_0_0_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [80, 752.0]
    rotation: 0
    state: disabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 532.0]
    rotation: 0
    state: enabled
- name: digital_crc32_bb_0
  id: digital_crc32_bb
  parameters:
    affinity: ''
    alias: ''
    check: 'False'
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    packed: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [440, 236.0]
    rotation: 0
    state: true
- name: digital_protocol_formatter_bb_0
  id: digital_protocol_formatter_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 204.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    FileName: '"./SDR_files/test_io/QPSK.png"'
    Pkt_len: packet_len
    _source_code: "\"\"\"\nEmbedded Python Block: File Source to Tagged Stream\n\"\
      \"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport pmt\n\
      import os.path\nimport sys\nimport base64\nimport math\n\n\"\"\"\nState definitions\n\
      \    0   idle\n    1   send preamble\n    2   send file data\n    3   send file\
      \ name\n    4   send post filler\n\"\"\"\n\nclass blk(gr.sync_block):\n    def\
      \ __init__(self, FileName='None', Pkt_len=52, initial_packet_fill=1):\n    \
      \    gr.sync_block.__init__(\n            self,\n            name='EPB: File\
      \ Source to Tagged Stream',\n            in_sig=None,\n            out_sig=[np.uint8])\n\
      \        self.FileName = FileName\n        self.Pkt_len = Pkt_len\n        self.initial_packet_fill\
      \ = initial_packet_fill\n        self.state = 0      # idle state\n        self.pre_count\
      \ = 0\n        self.indx = 0\n        self._debug = 0     # debug\n        self.data\
      \ = \"\"\n\n        if (os.path.exists(self.FileName)):\n            # open\
      \ input file\n            self.f_in = open (self.FileName, 'rb')\n         \
      \   self._eof = False\n            if (self._debug):\n                print\
      \ (\"File name:\", self.FileName)\n            self.state = 1\n        else:\n\
      \            print(self.FileName, 'does not exist')\n            self._eof =\
      \ True\n            self.state = 0\n\n        self.char_list = [37,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,93]\n        self.c_len = len (self.char_list)\n        # print (self.c_len)\n\
      \        self.filler = [37,85,85,85, 35,69,79,70, 85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,93]\n        self.f_len\
      \ = len (self.filler)\n\n    def work(self, input_items, output_items):\n\n\
      \        # Attempt at fixing buffer overflow\n        if(len(output_items[0])<(int(math.ceil(self.Pkt_len*8/6)))):\n\
      \            if (self._debug):\n                print(\"GNU Radio Buffer Overflow\"\
      )\n                print(\"Try Decreasing Input File Size or Increasing Minoutput\
      \ Buffer\")\n            return 0\n\n        if (self.state == 0):\n       \
      \     if (self._debug):\n                print(\"State 0\")\n            # idle\n\
      \            return -1\n\n        elif (self.state == 1):\n            # send\
      \ preamble\n            if (self._debug):\n                print (\"State =\
      \ 1\", self.pre_count)\n            key1 = pmt.intern(\"packet_len\")\n    \
      \        val1 = pmt.from_long(self.c_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.c_len\n        \
      \    \n            i = 0\n            j = 0\n            while(j<self.initial_packet_fill*self.c_len):\n\
      \                i = 0\n                while (i < self.c_len):\n          \
      \          output_items[0][j] = self.char_list[i]\n                    i +=\
      \ 1\n                    j += 1\n                \n                self.pre_count\
      \ += 1\n\n\n            if (self.pre_count > 64):\n                self.pre_count\
      \ = 0\n                self.state = 2      # send msg\n            return (self.c_len)\n\
      \n        elif (self.state == 2):\n            if (self._debug):\n         \
      \       print(\"State 2\")\n            while (not (self._eof)):\n         \
      \       buff = self.f_in.read(self.Pkt_len)\n                b_len = len(buff)\n\
      \                # if (self._debug):\n                #     print ('buff length\
      \ =', b_len, 'buff:', buff)\n                if b_len == 0:\n              \
      \      # print ('End of file')\n                    self._eof = True\n     \
      \               self.f_in.close()\n                    self.state = 3      #\
      \ send file name\n                    self.pre_count = 0\n                 \
      \   break\n                # convert to Base64\n                encoded = base64.b64encode\
      \ (buff)\n                e_len = len(encoded)\n                # if (self._debug):\n\
      \                #     print ('b64 length =', e_len)\n                #    \
      \ print('encoded:', encoded)\n                key0 = pmt.intern(\"packet_len\"\
      )\n                val0 = pmt.from_long(e_len)\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    self.indx,   # Index of the\
      \ tag\n                    key0,   # Key of the tag\n                    val0\
      \    # Value of the tag\n                    )\n                self.indx +=\
      \ e_len\n\n                if (self._debug):\n                    # print (\"\
      Length of input:\",len(input_items[0]))                    \n              \
      \      print (\"Length of output:\",len(output_items[0]))\n\n\n            \
      \    i = 0\n                while (i < len(encoded) and len(output_items[0])>=len(encoded)):\n\
      \                    # if (i == 63):\n                    #     print(\"i\"\
      ,encoded[i])\n                    output_items[0][i] = encoded[i]\n        \
      \            # print(\"i\",i)\n                    i += 1\n\n              \
      \  if(len(output_items[0])<len(encoded)):\n                    print(\"GNU Radio\
      \ Buffer Overflow\")\n                    print(\"Try Decreasing Input File\
      \ Size or Increasing Minoutput Buffer\")\n                    return 0\n   \
      \             return (e_len)\n\n        elif (self.state == 3):\n          \
      \  if (self._debug):\n                print(\"State 3\")\n            # send\
      \ file name\n            fn_len = len (self.FileName)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(fn_len+8)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += (fn_len+8)\n        \
      \    i = 0\n            while (i < 8):\n                output_items[0][i] =\
      \ self.filler[i]\n                i += 1\n            j = 0\n            while\
      \ (i < (fn_len+8)):\n                output_items[0][i] = ord(self.FileName[j])\n\
      \                i += 1\n                j += 1\n            self.state = 4\n\
      \            return (fn_len+8)\n\n        elif (self.state == 4):\n        \
      \    # send post fillers\n            if (self._debug):\n                print\
      \ (\"State = 4 , precount =\", self.pre_count)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(self.f_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.f_len\n        \
      \    \n            i = 0\n            while (i < self.f_len):\n            \
      \    output_items[0][i] = self.filler[i]\n                i += 1\n         \
      \   self.pre_count += 1\n            if (self.pre_count > 16):\n           \
      \     self.pre_count = 0\n                self.state = 0      # idle\n     \
      \       return (self.f_len)\n\n        return (0)\n\n"
    affinity: ''
    alias: ''
    comment: 'Filename is specified on the command line, e.g.:

      python3 pkt_xmt.py --InFile="../gr-logo.png"'
    initial_packet_fill: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''EPB: File Source to Tagged Stream'', ''blk'', [(''FileName'', "''None''"),
      (''Pkt_len'', ''52''), (''initial_packet_fill'', ''1'')], [], [(''0'', ''byte'',
      1)], '''', [''FileName'', ''Pkt_len'', ''initial_packet_fill''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 172.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    FileName: '"./SDR_files/test_io/HelloWorld.txt"'
    Pkt_len: packet_len
    _source_code: "\"\"\"\nEmbedded Python Block: File Source to Tagged Stream\n\"\
      \"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport pmt\n\
      import os.path\nimport sys\nimport base64\nimport math\n\n\"\"\"\nState definitions\n\
      \    0   idle\n    1   send preamble\n    2   send file data\n    3   send file\
      \ name\n    4   send post filler\n\"\"\"\n\nclass blk(gr.sync_block):\n    def\
      \ __init__(self, FileName='None', Pkt_len=52, initial_packet_fill=1):\n    \
      \    gr.sync_block.__init__(\n            self,\n            name='EPB: File\
      \ Source to Tagged Stream',\n            in_sig=None,\n            out_sig=[np.uint8])\n\
      \        self.FileName = FileName\n        self.Pkt_len = Pkt_len\n        self.initial_packet_fill\
      \ = initial_packet_fill\n        self.state = 0      # idle state\n        self.pre_count\
      \ = 0\n        self.indx = 0\n        self._debug = 0     # debug\n        self.data\
      \ = \"\"\n\n        if (os.path.exists(self.FileName)):\n            # open\
      \ input file\n            self.f_in = open (self.FileName, 'rb')\n         \
      \   self._eof = False\n            if (self._debug):\n                print\
      \ (\"File name:\", self.FileName)\n            self.state = 1\n        else:\n\
      \            print(self.FileName, 'does not exist')\n            self._eof =\
      \ True\n            self.state = 0\n\n        self.char_list = [37,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,93]\n        self.c_len = len (self.char_list)\n        # print (self.c_len)\n\
      \        self.filler = [37,85,85,85, 35,69,79,70, 85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,93]\n        self.f_len\
      \ = len (self.filler)\n\n    def work(self, input_items, output_items):\n\n\
      \        # Attempt at fixing buffer overflow\n        if(len(output_items[0])<(int(math.ceil(self.Pkt_len*8/6)))):\n\
      \            if (self._debug):\n                print(\"GNU Radio Buffer Overflow\"\
      )\n                print(\"Try Decreasing Input File Size or Increasing Minoutput\
      \ Buffer\")\n            return 0\n\n        if (self.state == 0):\n       \
      \     if (self._debug):\n                print(\"State 0\")\n            # idle\n\
      \            return -1\n\n        elif (self.state == 1):\n            # send\
      \ preamble\n            if (self._debug):\n                print (\"State =\
      \ 1\", self.pre_count)\n            key1 = pmt.intern(\"packet_len\")\n    \
      \        val1 = pmt.from_long(self.c_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.c_len\n        \
      \    \n            i = 0\n            j = 0\n            while(j<self.initial_packet_fill*self.c_len):\n\
      \                i = 0\n                while (i < self.c_len):\n          \
      \          output_items[0][j] = self.char_list[i]\n                    i +=\
      \ 1\n                    j += 1\n                \n                self.pre_count\
      \ += 1\n\n\n            if (self.pre_count > 64):\n                self.pre_count\
      \ = 0\n                self.state = 2      # send msg\n            return (self.c_len)\n\
      \n        elif (self.state == 2):\n            if (self._debug):\n         \
      \       print(\"State 2\")\n            while (not (self._eof)):\n         \
      \       buff = self.f_in.read(self.Pkt_len)\n                b_len = len(buff)\n\
      \                # if (self._debug):\n                #     print ('buff length\
      \ =', b_len, 'buff:', buff)\n                if b_len == 0:\n              \
      \      # print ('End of file')\n                    self._eof = True\n     \
      \               self.f_in.close()\n                    self.state = 3      #\
      \ send file name\n                    self.pre_count = 0\n                 \
      \   break\n                # convert to Base64\n                encoded = base64.b64encode\
      \ (buff)\n                e_len = len(encoded)\n                # if (self._debug):\n\
      \                #     print ('b64 length =', e_len)\n                #    \
      \ print('encoded:', encoded)\n                key0 = pmt.intern(\"packet_len\"\
      )\n                val0 = pmt.from_long(e_len)\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    self.indx,   # Index of the\
      \ tag\n                    key0,   # Key of the tag\n                    val0\
      \    # Value of the tag\n                    )\n                self.indx +=\
      \ e_len\n\n                if (self._debug):\n                    # print (\"\
      Length of input:\",len(input_items[0]))                    \n              \
      \      print (\"Length of output:\",len(output_items[0]))\n\n\n            \
      \    i = 0\n                while (i < len(encoded) and len(output_items[0])>=len(encoded)):\n\
      \                    # if (i == 63):\n                    #     print(\"i\"\
      ,encoded[i])\n                    output_items[0][i] = encoded[i]\n        \
      \            # print(\"i\",i)\n                    i += 1\n\n              \
      \  if(len(output_items[0])<len(encoded)):\n                    print(\"GNU Radio\
      \ Buffer Overflow\")\n                    print(\"Try Decreasing Input File\
      \ Size or Increasing Minoutput Buffer\")\n                    return 0\n   \
      \             return (e_len)\n\n        elif (self.state == 3):\n          \
      \  if (self._debug):\n                print(\"State 3\")\n            # send\
      \ file name\n            fn_len = len (self.FileName)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(fn_len+8)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += (fn_len+8)\n        \
      \    i = 0\n            while (i < 8):\n                output_items[0][i] =\
      \ self.filler[i]\n                i += 1\n            j = 0\n            while\
      \ (i < (fn_len+8)):\n                output_items[0][i] = ord(self.FileName[j])\n\
      \                i += 1\n                j += 1\n            self.state = 4\n\
      \            return (fn_len+8)\n\n        elif (self.state == 4):\n        \
      \    # send post fillers\n            if (self._debug):\n                print\
      \ (\"State = 4 , precount =\", self.pre_count)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(self.f_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.f_len\n        \
      \    \n            i = 0\n            while (i < self.f_len):\n            \
      \    output_items[0][i] = self.filler[i]\n                i += 1\n         \
      \   self.pre_count += 1\n            if (self.pre_count > 16):\n           \
      \     self.pre_count = 0\n                self.state = 0      # idle\n     \
      \       return (self.f_len)\n\n        return (0)\n\n"
    affinity: ''
    alias: ''
    comment: 'Filename is specified on the command line, e.g.:

      python3 pkt_xmt.py --InFile="../gr-logo.png"'
    initial_packet_fill: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''EPB: File Source to Tagged Stream'', ''blk'', [(''FileName'', "''None''"),
      (''Pkt_len'', ''52''), (''initial_packet_fill'', ''1'')], [], [(''0'', ''byte'',
      1)], '''', [''FileName'', ''Pkt_len'', ''initial_packet_fill''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 252.0]
    rotation: 0
    state: disabled
- name: epy_block_0_1
  id: epy_block
  parameters:
    FileName: '"C:/Users/natha/Downloads/02adfefa-2cd0-45b3-b767-7b6ae6ed20bf.jpg"'
    Pkt_len: packet_len
    _source_code: "\"\"\"\nEmbedded Python Block: File Source to Tagged Stream\n\"\
      \"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport pmt\n\
      import os.path\nimport sys\nimport base64\nimport math\n\n\"\"\"\nState definitions\n\
      \    0   idle\n    1   send preamble\n    2   send file data\n    3   send file\
      \ name\n    4   send post filler\n\"\"\"\n\nclass blk(gr.sync_block):\n    def\
      \ __init__(self, FileName='None', Pkt_len=52, initial_packet_fill=1):\n    \
      \    gr.sync_block.__init__(\n            self,\n            name='EPB: File\
      \ Source to Tagged Stream',\n            in_sig=None,\n            out_sig=[np.uint8])\n\
      \        self.FileName = FileName\n        self.Pkt_len = Pkt_len\n        self.initial_packet_fill\
      \ = initial_packet_fill\n        self.state = 0      # idle state\n        self.pre_count\
      \ = 0\n        self.indx = 0\n        self._debug = 0     # debug\n        self.data\
      \ = \"\"\n\n        if (os.path.exists(self.FileName)):\n            # open\
      \ input file\n            self.f_in = open (self.FileName, 'rb')\n         \
      \   self._eof = False\n            if (self._debug):\n                print\
      \ (\"File name:\", self.FileName)\n            self.state = 1\n        else:\n\
      \            print(self.FileName, 'does not exist')\n            self._eof =\
      \ True\n            self.state = 0\n\n        self.char_list = [37,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,93]\n        self.c_len = len (self.char_list)\n        # print (self.c_len)\n\
      \        self.filler = [37,85,85,85, 35,69,79,70, 85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,93]\n        self.f_len\
      \ = len (self.filler)\n\n    def work(self, input_items, output_items):\n\n\
      \        # Attempt at fixing buffer overflow\n        if(len(output_items[0])<(int(math.ceil(self.Pkt_len*8/6)))):\n\
      \            if (self._debug):\n                print(\"GNU Radio Buffer Overflow\"\
      )\n                print(\"Try Decreasing Input File Size or Increasing Minoutput\
      \ Buffer\")\n            return 0\n\n        if (self.state == 0):\n       \
      \     if (self._debug):\n                print(\"State 0\")\n            # idle\n\
      \            return (0)\n\n        elif (self.state == 1):\n            # send\
      \ preamble\n            if (self._debug):\n                print (\"State =\
      \ 1\", self.pre_count)\n            key1 = pmt.intern(\"packet_len\")\n    \
      \        val1 = pmt.from_long(self.c_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.c_len\n        \
      \    \n            i = 0\n            j = 0\n            while(j<self.initial_packet_fill*self.c_len):\n\
      \                i = 0\n                while (i < self.c_len):\n          \
      \          output_items[0][j] = self.char_list[i]\n                    i +=\
      \ 1\n                    j += 1\n                \n                self.pre_count\
      \ += 1\n\n\n            if (self.pre_count > 64):\n                self.pre_count\
      \ = 0\n                self.state = 2      # send msg\n            return (self.c_len)\n\
      \n        elif (self.state == 2):\n            if (self._debug):\n         \
      \       print(\"State 2\")\n            while (not (self._eof)):\n         \
      \       buff = self.f_in.read(self.Pkt_len)\n                b_len = len(buff)\n\
      \                # if (self._debug):\n                #     print ('buff length\
      \ =', b_len, 'buff:', buff)\n                if b_len == 0:\n              \
      \      print ('End of file')\n                    self._eof = True\n       \
      \             self.f_in.close()\n                    self.state = 3      # send\
      \ file name\n                    self.pre_count = 0\n                    break\n\
      \                # convert to Base64\n                encoded = base64.b64encode\
      \ (buff)\n                e_len = len(encoded)\n                # if (self._debug):\n\
      \                #     print ('b64 length =', e_len)\n                #    \
      \ print('encoded:', encoded)\n                key0 = pmt.intern(\"packet_len\"\
      )\n                val0 = pmt.from_long(e_len)\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    self.indx,   # Index of the\
      \ tag\n                    key0,   # Key of the tag\n                    val0\
      \    # Value of the tag\n                    )\n                self.indx +=\
      \ e_len\n\n                if (self._debug):\n                    # print (\"\
      Length of input:\",len(input_items[0]))                    \n              \
      \      print (\"Length of output:\",len(output_items[0]))\n\n\n            \
      \    i = 0\n                while (i < len(encoded) and len(output_items[0])>=len(encoded)):\n\
      \                    # if (i == 63):\n                    #     print(\"i\"\
      ,encoded[i])\n                    output_items[0][i] = encoded[i]\n        \
      \            # print(\"i\",i)\n                    i += 1\n\n              \
      \  if(len(output_items[0])<len(encoded)):\n                    print(\"GNU Radio\
      \ Buffer Overflow\")\n                    print(\"Try Decreasing Input File\
      \ Size or Increasing Minoutput Buffer\")\n                    return 0\n   \
      \             return (e_len)\n\n        elif (self.state == 3):\n          \
      \  if (self._debug):\n                print(\"State 3\")\n            # send\
      \ file name\n            fn_len = len (self.FileName)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(fn_len+8)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += (fn_len+8)\n        \
      \    i = 0\n            while (i < 8):\n                output_items[0][i] =\
      \ self.filler[i]\n                i += 1\n            j = 0\n            while\
      \ (i < (fn_len+8)):\n                output_items[0][i] = ord(self.FileName[j])\n\
      \                i += 1\n                j += 1\n            self.state = 4\n\
      \            return (fn_len+8)\n\n        elif (self.state == 4):\n        \
      \    # send post filler\n            if (self._debug):\n                print\
      \ (\"State = 4 , precount =\", self.pre_count)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(self.f_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.f_len\n        \
      \    \n            i = 0\n            while (i < self.f_len):\n            \
      \    output_items[0][i] = self.filler[i]\n                i += 1\n         \
      \   self.pre_count += 1\n            if (self.pre_count > 16):\n           \
      \     self.pre_count = 0\n                self.state = 0      # idle\n     \
      \       return (self.f_len)\n\n        return (0)\n\n"
    affinity: ''
    alias: ''
    comment: 'Filename is specified on the command line, e.g.:

      python3 pkt_xmt.py --InFile="../gr-logo.png"'
    initial_packet_fill: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''EPB: File Source to Tagged Stream'', ''blk'', [(''FileName'', "''None''"),
      (''Pkt_len'', ''52''), (''initial_packet_fill'', ''1'')], [], [(''0'', ''byte'',
      1)], '''', [''FileName'', ''Pkt_len'', ''initial_packet_fill''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 372.0]
    rotation: 0
    state: disabled
- name: epy_block_0_1_0
  id: epy_block
  parameters:
    FileName: '"./SDR_files/test_io/test.png"'
    Pkt_len: packet_len
    _source_code: "\"\"\"\nEmbedded Python Block: File Source to Tagged Stream\n\"\
      \"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport time\nimport pmt\n\
      import os.path\nimport sys\nimport base64\nimport math\n\n\"\"\"\nState definitions\n\
      \    0   idle\n    1   send preamble\n    2   send file data\n    3   send file\
      \ name\n    4   send post filler\n\"\"\"\n\nclass blk(gr.sync_block):\n    def\
      \ __init__(self, FileName='None', Pkt_len=52, initial_packet_fill=1):\n    \
      \    gr.sync_block.__init__(\n            self,\n            name='EPB: File\
      \ Source to Tagged Stream',\n            in_sig=None,\n            out_sig=[np.uint8])\n\
      \        self.FileName = FileName\n        self.Pkt_len = Pkt_len\n        self.initial_packet_fill\
      \ = initial_packet_fill\n        self.state = 0      # idle state\n        self.pre_count\
      \ = 0\n        self.indx = 0\n        self._debug = 0     # debug\n        self.data\
      \ = \"\"\n\n        if (os.path.exists(self.FileName)):\n            # open\
      \ input file\n            self.f_in = open (self.FileName, 'rb')\n         \
      \   self._eof = False\n            if (self._debug):\n                print\
      \ (\"File name:\", self.FileName)\n            self.state = 1\n        else:\n\
      \            print(self.FileName, 'does not exist')\n            self._eof =\
      \ True\n            self.state = 0\n\n        self.char_list = [37,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,93]\n        self.c_len = len (self.char_list)\n        # print (self.c_len)\n\
      \        self.filler = [37,85,85,85, 35,69,79,70, 85,85,85,85,85,85,85,85, 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,\
      \ 85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85, 85,85,85,93]\n        self.f_len\
      \ = len (self.filler)\n\n    def work(self, input_items, output_items):\n\n\
      \        # Attempt at fixing buffer overflow\n        if(len(output_items[0])<(int(math.ceil(self.Pkt_len*8/6)))):\n\
      \            if (self._debug):\n                print(\"GNU Radio Buffer Overflow\"\
      )\n                print(\"Try Decreasing Input File Size or Increasing Minoutput\
      \ Buffer\")\n            return 0\n\n        if (self.state == 0):\n       \
      \     if (self._debug):\n                print(\"State 0\")\n            # idle\n\
      \            return -1\n\n        elif (self.state == 1):\n            # send\
      \ preamble\n            if (self._debug):\n                print (\"State =\
      \ 1\", self.pre_count)\n            key1 = pmt.intern(\"packet_len\")\n    \
      \        val1 = pmt.from_long(self.c_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.c_len\n        \
      \    \n            i = 0\n            j = 0\n            while(j<self.initial_packet_fill*self.c_len):\n\
      \                i = 0\n                while (i < self.c_len):\n          \
      \          output_items[0][j] = self.char_list[i]\n                    i +=\
      \ 1\n                    j += 1\n                \n                self.pre_count\
      \ += 1\n\n\n            if (self.pre_count > 64):\n                self.pre_count\
      \ = 0\n                self.state = 2      # send msg\n            return (self.c_len)\n\
      \n        elif (self.state == 2):\n            if (self._debug):\n         \
      \       print(\"State 2\")\n            while (not (self._eof)):\n         \
      \       buff = self.f_in.read(self.Pkt_len)\n                b_len = len(buff)\n\
      \                # if (self._debug):\n                #     print ('buff length\
      \ =', b_len, 'buff:', buff)\n                if b_len == 0:\n              \
      \      # print ('End of file')\n                    self._eof = True\n     \
      \               self.f_in.close()\n                    self.state = 3      #\
      \ send file name\n                    self.pre_count = 0\n                 \
      \   break\n                # convert to Base64\n                encoded = base64.b64encode\
      \ (buff)\n                e_len = len(encoded)\n                # if (self._debug):\n\
      \                #     print ('b64 length =', e_len)\n                #    \
      \ print('encoded:', encoded)\n                key0 = pmt.intern(\"packet_len\"\
      )\n                val0 = pmt.from_long(e_len)\n                self.add_item_tag(0,\
      \ # Write to output port 0\n                    self.indx,   # Index of the\
      \ tag\n                    key0,   # Key of the tag\n                    val0\
      \    # Value of the tag\n                    )\n                self.indx +=\
      \ e_len\n\n                if (self._debug):\n                    # print (\"\
      Length of input:\",len(input_items[0]))                    \n              \
      \      print (\"Length of output:\",len(output_items[0]))\n\n\n            \
      \    i = 0\n                while (i < len(encoded) and len(output_items[0])>=len(encoded)):\n\
      \                    # if (i == 63):\n                    #     print(\"i\"\
      ,encoded[i])\n                    output_items[0][i] = encoded[i]\n        \
      \            # print(\"i\",i)\n                    i += 1\n\n              \
      \  if(len(output_items[0])<len(encoded)):\n                    print(\"GNU Radio\
      \ Buffer Overflow\")\n                    print(\"Try Decreasing Input File\
      \ Size or Increasing Minoutput Buffer\")\n                    return 0\n   \
      \             return (e_len)\n\n        elif (self.state == 3):\n          \
      \  if (self._debug):\n                print(\"State 3\")\n            # send\
      \ file name\n            fn_len = len (self.FileName)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(fn_len+8)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += (fn_len+8)\n        \
      \    i = 0\n            while (i < 8):\n                output_items[0][i] =\
      \ self.filler[i]\n                i += 1\n            j = 0\n            while\
      \ (i < (fn_len+8)):\n                output_items[0][i] = ord(self.FileName[j])\n\
      \                i += 1\n                j += 1\n            self.state = 4\n\
      \            return (fn_len+8)\n\n        elif (self.state == 4):\n        \
      \    # send post fillers\n            if (self._debug):\n                print\
      \ (\"State = 4 , precount =\", self.pre_count)\n            key1 = pmt.intern(\"\
      packet_len\")\n            val1 = pmt.from_long(self.f_len)\n            self.add_item_tag(0,\
      \ # Write to output port 0\n                self.indx,   # Index of the tag\n\
      \                key1,   # Key of the tag\n                val1    # Value of\
      \ the tag\n                )\n            self.indx += self.f_len\n        \
      \    \n            i = 0\n            while (i < self.f_len):\n            \
      \    output_items[0][i] = self.filler[i]\n                i += 1\n         \
      \   self.pre_count += 1\n            if (self.pre_count > 16):\n           \
      \     self.pre_count = 0\n                self.state = 0      # idle\n     \
      \       return (self.f_len)\n\n        return (0)\n\n"
    affinity: ''
    alias: ''
    comment: 'Filename is specified on the command line, e.g.:

      python3 pkt_xmt.py --InFile="../gr-logo.png"'
    initial_packet_fill: '30'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''EPB: File Source to Tagged Stream'', ''blk'', [(''FileName'', "''None''"),
      (''Pkt_len'', ''52''), (''initial_packet_fill'', ''1'')], [], [(''0'', ''byte'',
      1)], '''', [''FileName'', ''Pkt_len'', ''initial_packet_fill''])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 348.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: 1,0,1,3
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 1,0,1,3
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: Transmit data
    nconnections: '1'
    size: '256'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0.0'
    tr_level: '0.1'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '"packet_len"'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1.1'
    ymin: '-0.1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 804.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    fbw: '0'
    interp: '20'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 548.0]
    rotation: 0
    state: enabled
- name: soapy_hackrf_sink_0
  id: soapy_hackrf_sink
  parameters:
    affinity: ''
    alias: ''
    amp: 'False'
    bandwidth: '0'
    center_freq: transmit_freq
    comment: ''
    dev_args: ''
    samp_rate: 20*samp_rate
    type: fc32
    vga: '15'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 532.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: t1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1304, 248.0]
    rotation: 0
    state: true
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: t1
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 568.0]
    rotation: 0
    state: true

connections:
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [blocks_multiply_xx_0, '0', rational_resampler_xxx_0, '0']
- [blocks_repack_bits_bb_0_0, '0', blocks_uchar_to_float_0_0_0_0, '0']
- [blocks_tagged_stream_mux_0, '0', virtual_sink_0_0, '0']
- [blocks_uchar_to_float_0_0_0_0, '0', qtgui_time_sink_x_0, '0']
- [digital_constellation_modulator_0, '0', blocks_file_sink_0_0, '0']
- [digital_constellation_modulator_0, '0', blocks_multiply_xx_0, '0']
- [digital_crc32_bb_0, '0', blocks_tagged_stream_mux_0, '1']
- [digital_crc32_bb_0, '0', digital_protocol_formatter_bb_0, '0']
- [digital_protocol_formatter_bb_0, '0', blocks_tagged_stream_mux_0, '0']
- [epy_block_0, '0', digital_crc32_bb_0, '0']
- [epy_block_0_0, '0', digital_crc32_bb_0, '0']
- [epy_block_0_1, '0', digital_crc32_bb_0, '0']
- [epy_block_0_1_0, '0', digital_crc32_bb_0, '0']
- [rational_resampler_xxx_0, '0', blocks_file_sink_0, '0']
- [rational_resampler_xxx_0, '0', soapy_hackrf_sink_0, '0']
- [virtual_source_0, '0', blocks_repack_bits_bb_0_0, '0']
- [virtual_source_0, '0', digital_constellation_modulator_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.8.0
